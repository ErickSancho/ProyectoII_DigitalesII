
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3565 (git sha1 474cd02e, gcc 9.3.0-10ubuntu2 -fPIC -Os)


-- Executing script file `script.ys' --

1. Executing Verilog-2005 frontend: fifo.v
Parsing Verilog input from `fifo.v' to AST representation.
Generating RTLIL representation for module `\fifo'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: memory.v
Parsing Verilog input from `memory.v' to AST representation.
Generating RTLIL representation for module `\memory'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: read_logic.v
Parsing Verilog input from `read_logic.v' to AST representation.
Generating RTLIL representation for module `\read_logic'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: write_logic.v
Parsing Verilog input from `write_logic.v' to AST representation.
Generating RTLIL representation for module `\write_logic'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: control_logic.v
Parsing Verilog input from `control_logic.v' to AST representation.
Generating RTLIL representation for module `\control_logic'.
Successfully finished Verilog frontend.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \fifo
Used module:     \memory
Used module:     \control_logic
Used module:     \read_logic
Used module:     \write_logic

6.2. Analyzing design hierarchy..
Top module:  \fifo
Used module:     \memory
Used module:     \control_logic
Used module:     \read_logic
Used module:     \write_logic
Removed 0 unused modules.

7. Executing PROC pass (convert processes to netlists).

7.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 7 switch rules as full_case in process $proc$control_logic.v:22$40 in module control_logic.
Marked 2 switch rules as full_case in process $proc$write_logic.v:16$34 in module write_logic.
Marked 2 switch rules as full_case in process $proc$read_logic.v:16$28 in module read_logic.
Marked 2 switch rules as full_case in process $proc$memory.v:19$11 in module memory.
Removed a total of 0 dead cases.

7.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 5 redundant assignments.
Promoted 3 assignments to connections.

7.4. Executing PROC_INIT pass (extract init attributes).

7.5. Executing PROC_ARST pass (detect async resets in processes).

7.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\control_logic.$proc$control_logic.v:22$40'.
     1/6: $0\almost_full[0:0]
     2/6: $0\almost_empty[0:0]
     3/6: $0\counter[2:0]
     4/6: $0\fifo_empty[0:0]
     5/6: $0\fifo_full[0:0]
     6/6: $0\error[0:0]
Creating decoders for process `\write_logic.$proc$write_logic.v:16$34'.
     1/2: $0\push[0:0]
     2/2: $0\wr_ptr[2:0]
Creating decoders for process `\read_logic.$proc$read_logic.v:16$28'.
     1/2: $0\pop[0:0]
     2/2: $0\rd_ptr[2:0]
Creating decoders for process `\memory.$proc$memory.v:19$11'.
     1/9: $1\i[31:0]
     2/9: $0\data_out_MM[5:0]
     3/9: $0$memwr$\Mem$memory.v:24$6_EN[5:0]$12
     4/9: $0$memwr$\Mem$memory.v:24$7_EN[5:0]$13
     5/9: $0$memwr$\Mem$memory.v:24$8_EN[5:0]$14
     6/9: $0$memwr$\Mem$memory.v:24$9_EN[5:0]$15
     7/9: $0$memwr$\Mem$memory.v:30$10_EN[5:0]$18
     8/9: $0$memwr$\Mem$memory.v:30$10_DATA[5:0]$17
     9/9: $0$memwr$\Mem$memory.v:30$10_ADDR[31:0]$16
Creating decoders for process `\fifo.$proc$fifo.v:79$1'.

7.7. Executing PROC_DLATCH pass (convert process syncs to latches).

7.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\control_logic.\error' using process `\control_logic.$proc$control_logic.v:22$40'.
  created $dff cell `$procdff$201' with positive edge clock.
Creating register for signal `\control_logic.\almost_empty' using process `\control_logic.$proc$control_logic.v:22$40'.
  created $dff cell `$procdff$202' with positive edge clock.
Creating register for signal `\control_logic.\almost_full' using process `\control_logic.$proc$control_logic.v:22$40'.
  created $dff cell `$procdff$203' with positive edge clock.
Creating register for signal `\control_logic.\fifo_full' using process `\control_logic.$proc$control_logic.v:22$40'.
  created $dff cell `$procdff$204' with positive edge clock.
Creating register for signal `\control_logic.\fifo_empty' using process `\control_logic.$proc$control_logic.v:22$40'.
  created $dff cell `$procdff$205' with positive edge clock.
Creating register for signal `\control_logic.\counter' using process `\control_logic.$proc$control_logic.v:22$40'.
  created $dff cell `$procdff$206' with positive edge clock.
Creating register for signal `\write_logic.\push' using process `\write_logic.$proc$write_logic.v:16$34'.
  created $dff cell `$procdff$207' with positive edge clock.
Creating register for signal `\write_logic.\wr_ptr' using process `\write_logic.$proc$write_logic.v:16$34'.
  created $dff cell `$procdff$208' with positive edge clock.
Creating register for signal `\read_logic.\pop' using process `\read_logic.$proc$read_logic.v:16$28'.
  created $dff cell `$procdff$209' with positive edge clock.
Creating register for signal `\read_logic.\rd_ptr' using process `\read_logic.$proc$read_logic.v:16$28'.
  created $dff cell `$procdff$210' with positive edge clock.
Creating register for signal `\memory.\data_out_MM' using process `\memory.$proc$memory.v:19$11'.
  created $dff cell `$procdff$211' with positive edge clock.
Creating register for signal `\memory.\i' using process `\memory.$proc$memory.v:19$11'.
  created $dff cell `$procdff$212' with positive edge clock.
Creating register for signal `\memory.$memwr$\Mem$memory.v:24$6_EN' using process `\memory.$proc$memory.v:19$11'.
  created $dff cell `$procdff$213' with positive edge clock.
Creating register for signal `\memory.$memwr$\Mem$memory.v:24$7_EN' using process `\memory.$proc$memory.v:19$11'.
  created $dff cell `$procdff$214' with positive edge clock.
Creating register for signal `\memory.$memwr$\Mem$memory.v:24$8_EN' using process `\memory.$proc$memory.v:19$11'.
  created $dff cell `$procdff$215' with positive edge clock.
Creating register for signal `\memory.$memwr$\Mem$memory.v:24$9_EN' using process `\memory.$proc$memory.v:19$11'.
  created $dff cell `$procdff$216' with positive edge clock.
Creating register for signal `\memory.$memwr$\Mem$memory.v:30$10_ADDR' using process `\memory.$proc$memory.v:19$11'.
  created $dff cell `$procdff$217' with positive edge clock.
Creating register for signal `\memory.$memwr$\Mem$memory.v:30$10_DATA' using process `\memory.$proc$memory.v:19$11'.
  created $dff cell `$procdff$218' with positive edge clock.
Creating register for signal `\memory.$memwr$\Mem$memory.v:30$10_EN' using process `\memory.$proc$memory.v:19$11'.
  created $dff cell `$procdff$219' with positive edge clock.
Creating register for signal `\fifo.\fifo_data_out' using process `\fifo.$proc$fifo.v:79$1'.
  created $dff cell `$procdff$220' with positive edge clock.
Creating register for signal `\fifo.\data_in_MM' using process `\fifo.$proc$fifo.v:79$1'.
  created $dff cell `$procdff$221' with positive edge clock.

7.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 10 empty switches in `\control_logic.$proc$control_logic.v:22$40'.
Removing empty process `control_logic.$proc$control_logic.v:22$40'.
Found and cleaned up 3 empty switches in `\write_logic.$proc$write_logic.v:16$34'.
Removing empty process `write_logic.$proc$write_logic.v:16$34'.
Found and cleaned up 3 empty switches in `\read_logic.$proc$read_logic.v:16$28'.
Removing empty process `read_logic.$proc$read_logic.v:16$28'.
Found and cleaned up 3 empty switches in `\memory.$proc$memory.v:19$11'.
Removing empty process `memory.$proc$memory.v:19$11'.
Removing empty process `fifo.$proc$fifo.v:79$1'.
Cleaned up 19 empty switches.

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
<suppressed ~6 debug messages>
Optimizing module write_logic.
<suppressed ~2 debug messages>
Optimizing module read_logic.
<suppressed ~2 debug messages>
Optimizing module memory.
<suppressed ~9 debug messages>
Optimizing module fifo.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
<suppressed ~12 debug messages>
Finding identical cells in module `\write_logic'.
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\memory'.
Finding identical cells in module `\fifo'.
Removed a total of 4 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \write_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \read_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_logic.
  Optimizing cells in module \write_logic.
  Optimizing cells in module \read_logic.
  Optimizing cells in module \memory.
    Consolidated identical input bits for $mux cell $procmux$186:
      Old ports: A=6'000000, B=6'111111, Y=$procmux$186_Y
      New ports: A=1'0, B=1'1, Y=$procmux$186_Y [0]
      New connections: $procmux$186_Y [5:1] = { $procmux$186_Y [0] $procmux$186_Y [0] $procmux$186_Y [0] $procmux$186_Y [0] $procmux$186_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$184:
      Old ports: A=6'111111, B=6'000000, Y=$procmux$184_Y
      New ports: A=1'1, B=1'0, Y=$procmux$184_Y [0]
      New connections: $procmux$184_Y [5:1] = { $procmux$184_Y [0] $procmux$184_Y [0] $procmux$184_Y [0] $procmux$184_Y [0] $procmux$184_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$181:
      Old ports: A=6'111111, B=6'000000, Y=$procmux$181_Y
      New ports: A=1'1, B=1'0, Y=$procmux$181_Y [0]
      New connections: $procmux$181_Y [5:1] = { $procmux$181_Y [0] $procmux$181_Y [0] $procmux$181_Y [0] $procmux$181_Y [0] $procmux$181_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$178:
      Old ports: A=6'111111, B=6'000000, Y=$procmux$178_Y
      New ports: A=1'1, B=1'0, Y=$procmux$178_Y [0]
      New connections: $procmux$178_Y [5:1] = { $procmux$178_Y [0] $procmux$178_Y [0] $procmux$178_Y [0] $procmux$178_Y [0] $procmux$178_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$175:
      Old ports: A=6'111111, B=6'000000, Y=$procmux$175_Y
      New ports: A=1'1, B=1'0, Y=$procmux$175_Y [0]
      New connections: $procmux$175_Y [5:1] = { $procmux$175_Y [0] $procmux$175_Y [0] $procmux$175_Y [0] $procmux$175_Y [0] $procmux$175_Y [0] }
  Optimizing cells in module \memory.
    Consolidated identical input bits for $mux cell $procmux$189:
      Old ports: A=6'000000, B=$procmux$186_Y, Y=$procmux$189_Y
      New ports: A=1'0, B=$procmux$186_Y [0], Y=$procmux$189_Y [0]
      New connections: $procmux$189_Y [5:1] = { $procmux$189_Y [0] $procmux$189_Y [0] $procmux$189_Y [0] $procmux$189_Y [0] $procmux$189_Y [0] }
  Optimizing cells in module \memory.
  Optimizing cells in module \fifo.
Performed a total of 6 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
Finding identical cells in module `\write_logic'.
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\memory'.
<suppressed ~18 debug messages>
Finding identical cells in module `\fifo'.
Removed a total of 6 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$205 ($dff) from module control_logic (D = $procmux$102_Y, Q = \fifo_empty, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$222 ($sdff) from module control_logic (D = $procmux$99_Y, Q = \fifo_empty).
Adding SRST signal on $procdff$203 ($dff) from module control_logic (D = $procmux$66_Y, Q = \almost_full, rval = 1'0).
Adding SRST signal on $procdff$206 ($dff) from module control_logic (D = $procmux$83_Y, Q = \counter, rval = 3'000).
Adding EN signal on $auto$opt_dff.cc:702:run$237 ($sdff) from module control_logic (D = $procmux$80_Y, Q = \counter).
Adding SRST signal on $procdff$204 ($dff) from module control_logic (D = $procmux$121_Y, Q = \fifo_full, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$245 ($sdff) from module control_logic (D = $procmux$118_Y, Q = \fifo_full).
Adding SRST signal on $procdff$201 ($dff) from module control_logic (D = $procmux$132_Y, Q = \error, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$259 ($sdff) from module control_logic (D = $procmux$132_Y, Q = \error).
Adding SRST signal on $procdff$202 ($dff) from module control_logic (D = $procmux$72_Y, Q = \almost_empty, rval = 1'0).
Adding SRST signal on $procdff$207 ($dff) from module write_logic (D = $procmux$138_Y, Q = \push, rval = 1'0).
Adding SRST signal on $procdff$208 ($dff) from module write_logic (D = $procmux$146_Y, Q = \wr_ptr, rval = 3'000).
Adding EN signal on $auto$opt_dff.cc:702:run$265 ($sdff) from module write_logic (D = $procmux$144_Y, Q = \wr_ptr).
Adding SRST signal on $procdff$209 ($dff) from module read_logic (D = $procmux$152_Y, Q = \pop, rval = 1'0).
Adding SRST signal on $procdff$210 ($dff) from module read_logic (D = $procmux$160_Y, Q = \rd_ptr, rval = 3'000).
Adding EN signal on $auto$opt_dff.cc:702:run$268 ($sdff) from module read_logic (D = $procmux$158_Y, Q = \rd_ptr).
Adding SRST signal on $procdff$211 ($dff) from module memory (D = $memrd$\Mem$memory.v:34$21_DATA, Q = \data_out_MM, rval = 6'000000).
Adding EN signal on $procdff$212 ($dff) from module memory (D = 4, Q = \i).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 1-bit at position 2 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 3 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 4 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 5 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 6 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 7 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 8 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 9 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 10 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 11 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 12 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 13 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 14 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 15 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 16 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 17 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 18 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 19 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 20 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 21 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 22 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 23 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 24 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 25 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 26 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 27 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 28 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 29 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 30 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.
Setting constant 0-bit at position 31 on $auto$opt_dff.cc:764:run$273 ($dffe) from module memory.

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \write_logic..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \fifo..
Removed 22 unused cells and 103 unused wires.
<suppressed ~27 debug messages>

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
<suppressed ~4 debug messages>
Optimizing module fifo.
Optimizing module memory.
Optimizing module read_logic.
Optimizing module write_logic.

8.9. Rerunning OPT passes. (Maybe there is more to do..)

8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \read_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \write_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_logic.
  Optimizing cells in module \fifo.
  Optimizing cells in module \memory.
  Optimizing cells in module \read_logic.
  Optimizing cells in module \write_logic.
Performed a total of 0 changes.

8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
<suppressed ~12 debug messages>
Finding identical cells in module `\fifo'.
Finding identical cells in module `\memory'.
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\write_logic'.
Removed a total of 4 cells.

8.13. Executing OPT_DFF pass (perform DFF optimizations).

8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \write_logic..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
Optimizing module fifo.
Optimizing module memory.
Optimizing module read_logic.
Optimizing module write_logic.

8.16. Rerunning OPT passes. (Maybe there is more to do..)

8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \read_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \write_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_logic.
  Optimizing cells in module \fifo.
  Optimizing cells in module \memory.
  Optimizing cells in module \read_logic.
  Optimizing cells in module \write_logic.
Performed a total of 0 changes.

8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\memory'.
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\write_logic'.
Removed a total of 0 cells.

8.20. Executing OPT_DFF pass (perform DFF optimizations).

8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \write_logic..

8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
Optimizing module fifo.
Optimizing module memory.
Optimizing module read_logic.
Optimizing module write_logic.

8.23. Finished OPT passes. (There is nothing left to do.)

9. Executing FSM pass (extract and optimize FSM).

9.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking memory.$memwr$\Mem$memory.v:24$6_EN as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking memory.$memwr$\Mem$memory.v:30$10_EN as FSM state register:
    Users of register don't seem to benefit from recoding.

9.2. Executing FSM_EXTRACT pass (extracting FSM from design).

9.3. Executing FSM_OPT pass (simple optimizations of FSMs).

9.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \write_logic..

9.5. Executing FSM_OPT pass (simple optimizations of FSMs).

9.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

9.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

9.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
Optimizing module fifo.
Optimizing module memory.
Optimizing module read_logic.
Optimizing module write_logic.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\memory'.
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\write_logic'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \read_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \write_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_logic.
  Optimizing cells in module \fifo.
  Optimizing cells in module \memory.
  Optimizing cells in module \read_logic.
  Optimizing cells in module \write_logic.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\memory'.
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\write_logic'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \write_logic..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
Optimizing module fifo.
Optimizing module memory.
Optimizing module read_logic.
Optimizing module write_logic.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing MEMORY pass.

11.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

11.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\Mem$memory.v:0$23' in module `\memory': merged $dff to cell.
Checking cell `$memwr$\Mem$memory.v:0$24' in module `\memory': merged $dff to cell.
Checking cell `$memwr$\Mem$memory.v:0$25' in module `\memory': merged $dff to cell.
Checking cell `$memwr$\Mem$memory.v:0$26' in module `\memory': merged $dff to cell.
Checking cell `$memwr$\Mem$memory.v:0$27' in module `\memory': merged $dff to cell.
Checking cell `$memrd$\Mem$memory.v:34$21' in module `\memory': no (compatible) $dff found.

11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \write_logic..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

11.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating write ports of memory memory.Mem by address:
  New clock domain: posedge \clk
    Port 0 ($memwr$\Mem$memory.v:0$23) has addr 0.
      Active bits: 111111
    Port 1 ($memwr$\Mem$memory.v:0$24) has addr 1.
      Active bits: 111111
    Port 2 ($memwr$\Mem$memory.v:0$25) has addr 2.
      Active bits: 111111
    Port 3 ($memwr$\Mem$memory.v:0$26) has addr 3.
      Active bits: 111111
    Port 4 ($memwr$\Mem$memory.v:0$27) has addr $sub$memory.v:30$20_Y.
      Active bits: 111111
Consolidating write ports of memory memory.Mem using sat-based resource sharing:
  Port 0 ($memwr$\Mem$memory.v:0$23) on posedge \clk: considered
  Port 1 ($memwr$\Mem$memory.v:0$24) on posedge \clk: considered
  Port 2 ($memwr$\Mem$memory.v:0$25) on posedge \clk: considered
  Port 3 ($memwr$\Mem$memory.v:0$26) on posedge \clk: considered
  Port 4 ($memwr$\Mem$memory.v:0$27) on posedge \clk: considered
  Common input cone for all EN signals: 3 cells.
  Size of unconstrained SAT problem: 23 variables, 53 clauses
  According to SAT solver sharing of port 0 with port 1 is not possible.
  According to SAT solver sharing of port 1 with port 2 is not possible.
  According to SAT solver sharing of port 2 with port 3 is not possible.
  Merging port 3 into port 4.

11.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \write_logic..

11.6. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\Mem' in module `\memory':
  $memwr$\Mem$memory.v:0$23 ($memwr)
  $memwr$\Mem$memory.v:0$24 ($memwr)
  $memwr$\Mem$memory.v:0$25 ($memwr)
  $memwr$\Mem$memory.v:0$27 ($memwr)
  $memrd$\Mem$memory.v:34$21 ($memrd)

11.7. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \Mem in module \memory:
  created 4 $dff cells and 0 static cells of width 6.
  read interface: 0 $dff and 3 $mux cells.
  write interface: 16 write mux blocks.

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
Optimizing module fifo.
Optimizing module memory.
<suppressed ~45 debug messages>
Optimizing module read_logic.
Optimizing module write_logic.

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\memory'.
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\write_logic'.
Removed a total of 0 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $auto$memory_share.cc:646:consolidate_wr_using_sat$281: $0$memwr$\Mem$memory.v:30$10_EN[5:0]$18 [5] -> 1'1
  Analyzing evaluation results.
Running muxtree optimizer on module \read_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \write_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_logic.
  Optimizing cells in module \fifo.
  Optimizing cells in module \memory.
  Optimizing cells in module \read_logic.
  Optimizing cells in module \write_logic.
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\memory'.
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\write_logic'.
Removed a total of 0 cells.

12.6. Executing OPT_DFF pass (perform DFF optimizations).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \write_logic..
Removed 0 unused cells and 46 unused wires.
<suppressed ~1 debug messages>

12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
Optimizing module fifo.
Optimizing module memory.
Optimizing module read_logic.
Optimizing module write_logic.

12.9. Rerunning OPT passes. (Maybe there is more to do..)

12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \read_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \write_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_logic.
  Optimizing cells in module \fifo.
  Optimizing cells in module \memory.
  Optimizing cells in module \read_logic.
  Optimizing cells in module \write_logic.
Performed a total of 0 changes.

12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\memory'.
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\write_logic'.
Removed a total of 0 cells.

12.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\Mem[3]$289 ($dff) from module memory (D = $auto$rtlil.cc:2218:Mux$279, Q = \Mem[3]).
Adding EN signal on $memory\Mem[2]$287 ($dff) from module memory (D = $memory\Mem$wrmux[2][3][0]$y$387, Q = \Mem[2]).
Adding EN signal on $memory\Mem[1]$285 ($dff) from module memory (D = $memory\Mem$wrmux[1][3][0]$y$361, Q = \Mem[1]).
Adding EN signal on $memory\Mem[0]$283 ($dff) from module memory (D = $memory\Mem$wrmux[0][3][0]$y$331, Q = \Mem[0]).

12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \write_logic..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
Optimizing module fifo.
Optimizing module memory.
Optimizing module read_logic.
Optimizing module write_logic.

12.16. Rerunning OPT passes. (Maybe there is more to do..)

12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \read_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \write_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_logic.
  Optimizing cells in module \fifo.
  Optimizing cells in module \memory.
  Optimizing cells in module \read_logic.
  Optimizing cells in module \write_logic.
Performed a total of 0 changes.

12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\memory'.
<suppressed ~6 debug messages>
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\write_logic'.
Removed a total of 2 cells.

12.20. Executing OPT_DFF pass (perform DFF optimizations).

12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \write_logic..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
Optimizing module fifo.
Optimizing module memory.
Optimizing module read_logic.
Optimizing module write_logic.

12.23. Rerunning OPT passes. (Maybe there is more to do..)

12.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \read_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \write_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

12.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_logic.
  Optimizing cells in module \fifo.
  Optimizing cells in module \memory.
  Optimizing cells in module \read_logic.
  Optimizing cells in module \write_logic.
Performed a total of 0 changes.

12.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\memory'.
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\write_logic'.
Removed a total of 0 cells.

12.27. Executing OPT_DFF pass (perform DFF optimizations).

12.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \write_logic..

12.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
Optimizing module fifo.
Optimizing module memory.
Optimizing module read_logic.
Optimizing module write_logic.

12.30. Finished OPT passes. (There is nothing left to do.)

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dff.
Running "alumacc" on wrapper $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$le:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$le:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$le:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=3:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_or.
Running "alumacc" on wrapper $extern:wrap:$le:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$le:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$le:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:A_SIGNED=0:A_WIDTH=3:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
No more expansions possible.
<suppressed ~1776 debug messages>

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
<suppressed ~1334 debug messages>
Optimizing module fifo.
Optimizing module memory.
<suppressed ~609 debug messages>
Optimizing module read_logic.
<suppressed ~306 debug messages>
Optimizing module write_logic.
<suppressed ~306 debug messages>

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
<suppressed ~243 debug messages>
Finding identical cells in module `\fifo'.
Finding identical cells in module `\memory'.
<suppressed ~456 debug messages>
Finding identical cells in module `\read_logic'.
<suppressed ~3 debug messages>
Finding identical cells in module `\write_logic'.
<suppressed ~3 debug messages>
Removed a total of 235 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_logic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \read_logic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \write_logic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_logic.
  Optimizing cells in module \fifo.
  Optimizing cells in module \memory.
  Optimizing cells in module \read_logic.
  Optimizing cells in module \write_logic.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\memory'.
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\write_logic'.
Removed a total of 0 cells.

14.6. Executing OPT_DFF pass (perform DFF optimizations).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \write_logic..
Removed 39 unused cells and 1420 unused wires.
<suppressed ~43 debug messages>

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
Optimizing module fifo.
Optimizing module memory.
Optimizing module read_logic.
Optimizing module write_logic.

14.9. Rerunning OPT passes. (Maybe there is more to do..)

14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \control_logic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fifo..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \read_logic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \write_logic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \control_logic.
  Optimizing cells in module \fifo.
  Optimizing cells in module \memory.
  Optimizing cells in module \read_logic.
  Optimizing cells in module \write_logic.
Performed a total of 0 changes.

14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\control_logic'.
Finding identical cells in module `\fifo'.
Finding identical cells in module `\memory'.
Finding identical cells in module `\read_logic'.
Finding identical cells in module `\write_logic'.
Removed a total of 0 cells.

14.13. Executing OPT_DFF pass (perform DFF optimizations).

14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \control_logic..
Finding unused cells or wires in module \fifo..
Finding unused cells or wires in module \memory..
Finding unused cells or wires in module \read_logic..
Finding unused cells or wires in module \write_logic..

14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module control_logic.
Optimizing module fifo.
Optimizing module memory.
Optimizing module read_logic.
Optimizing module write_logic.

14.16. Finished OPT passes. (There is nothing left to do.)

15. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=18.00) is a direct match for cell type $_DFFSR_PPP_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    \DFFSR _DFFSR_PPP_ (.C( C), .D( D), .Q( Q), .R( R), .S( S));

15.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\control_logic':
  mapped 8 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\fifo':
  mapped 12 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\memory':
  mapped 30 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\read_logic':
  mapped 4 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\write_logic':
  mapped 4 $_DFF_P_ cells to \DFF cells.

16. Executing ABC pass (technology mapping using ABC).

16.1. Extracting gate netlist of module `\control_logic' to `<abc-temp-dir>/input.blif'..
Extracted 120 gates and 138 wires to a netlist network with 15 inputs and 8 outputs.

16.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_2020/Proyectos_Digitales_II/Proyecto_2/src/FIFO_Memoria/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_2020/Proyectos_Digitales_II/Proyecto_2/src/FIFO_Memoria/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

16.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       36
ABC RESULTS:               NOR cells:       41
ABC RESULTS:               NOT cells:       13
ABC RESULTS:        internal signals:      115
ABC RESULTS:           input signals:       15
ABC RESULTS:          output signals:        8
Removing temp directory.

16.2. Extracting gate netlist of module `\fifo' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

16.3. Extracting gate netlist of module `\memory' to `<abc-temp-dir>/input.blif'..
Extracted 113 gates and 153 wires to a netlist network with 37 inputs and 30 outputs.

16.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_2020/Proyectos_Digitales_II/Proyecto_2/src/FIFO_Memoria/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_2020/Proyectos_Digitales_II/Proyecto_2/src/FIFO_Memoria/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

16.3.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      102
ABC RESULTS:               NOR cells:       42
ABC RESULTS:               NOT cells:       19
ABC RESULTS:        internal signals:       86
ABC RESULTS:           input signals:       37
ABC RESULTS:          output signals:       30
Removing temp directory.

16.4. Extracting gate netlist of module `\read_logic' to `<abc-temp-dir>/input.blif'..
Extracted 19 gates and 26 wires to a netlist network with 6 inputs and 4 outputs.

16.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_2020/Proyectos_Digitales_II/Proyecto_2/src/FIFO_Memoria/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_2020/Proyectos_Digitales_II/Proyecto_2/src/FIFO_Memoria/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

16.4.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        5
ABC RESULTS:               NOR cells:        6
ABC RESULTS:               NOT cells:        4
ABC RESULTS:        internal signals:       16
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        4
Removing temp directory.

16.5. Extracting gate netlist of module `\write_logic' to `<abc-temp-dir>/input.blif'..
Extracted 19 gates and 26 wires to a netlist network with 6 inputs and 4 outputs.

16.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/erick/Escritorio/Proyectos_2020/Proyectos_Digitales_II/Proyecto_2/src/FIFO_Memoria/cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Library "demo" from "/home/erick/Escritorio/Proyectos_2020/Proyectos_Digitales_II/Proyecto_2/src/FIFO_Memoria/cmos_cells.lib" has 4 cells (2 skipped: 2 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.00 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

16.5.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        5
ABC RESULTS:               NOR cells:        6
ABC RESULTS:               NOT cells:        4
ABC RESULTS:        internal signals:       16
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        4
Removing temp directory.

17. Executing Verilog backend.
Dumping module `\control_logic'.
Dumping module `\fifo'.
Dumping module `\memory'.
Dumping module `\read_logic'.
Dumping module `\write_logic'.

End of script. Logfile hash: e118ad3a12, CPU: user 0.52s system 0.00s, MEM: 24.01 MB peak
Yosys 0.9+3565 (git sha1 474cd02e, gcc 9.3.0-10ubuntu2 -fPIC -Os)
Time spent: 39% 1x abc (0 sec), 16% 16x opt_expr (0 sec), ...
